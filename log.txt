-AS: lo representamos con tupla <agentes: dicHash(agente, datosAgente); posiciones: vector(Iter)* , masVigilante: Iter, conKSanc: vector(Iter)**>
donde-> datosAgente es tupla <pos: posicion, cantSanc: nat, cantAtrapados: nat, iteradorAConKSanc>
		Iter es tupla <agente, puntero("hash")>
Posiciones va a estar ordenado por posicion.
conKSanc va a estar ordenado por agente.


-Campus: es lo que era nuestra grilla. lo representamos con tupla <alto: nat, ancho: nat, obstaculos: conj(posicion)>
Tenemos que ver que estructura usamos para los obstaculos de la grilla. Deberia ser algo parecido a posiciones de AS que lo tengamos ordenado por posicion.

-Hippies: lo representamos con tupla <dicTrie(nombre, posicion), vector(hippie)>
donde-> hippie es tupla <nombre,posicion>

-Estudiantes: lo representamos con tupla <dicTrie(nombre, posicion), vector(est)>
donde-> est es tupla <nombre,posicion>

El trie tiene que tener un iterador sii.







++++++++++++ VIEJO +++++++++++++++
Modulo que tenga complejidades

-AS: lo representamos con tupla <diccHash(placa,datosAgente), arrayPos, arraySanciones, masVigilante, arrayConMismasSanciones>
	+ con datosAgente es tupla <posicion, cantSanciones, cantAtrapados>
	+ arrayPos va a ser una matriz con el alto y ancho del campus (grilla), y que en cada posicion de la matriz
	  este (si es que esta ahi) el as. Esto va a ser que se actualice en O(log(N_a).
	+ arraySanciones va a ser un array ordenado por sancion que en cada pos va a haber una lista enlazada con los
	  as que tengan esa cant de sanciones. Se crea en O(N_a) y despues se obtiene en O(log(N_a)).
	+ masVigilante va a ser una placa y lo vamos a tener en O(1)
	+ arrayConMismasSanciones va a ser un array asqueroso en donde cada posicion va a ser una placa del as (ordenadas) y va a tener un puntero a una lista que tienen los as con la misma cantidad de sanciones. Como nos dijo pachi, para que tenga complejidad O(1) devolvemos un iterador.
	
-Campus: es lo que era nuestra grilla. lo representamos con tupla <alto, ancho, Obstaculos: conj(posicion)>
	+ alto es tipo nat.
	+ ancho es tipo nat.
	+ obstaculos es un conj con todas las posciones como obstaculos.

-CampusSeguro: va a ser tupla <agentes: , estudiantes: trieEst, hippies: trieHip, grilla: campus>
	+ agentes es AS.
	+ estudiantes es trie.
	+ hippies es trie.
	+ grilla es campus.


Dividamos el trabajo:
TAD de hash(alpha): kevin.
TAD de trie(alpha): Nico.
Empezar a hacer los modulos:
	+ CampusSeguro: Joel.
	+ Campus:
	+ AS:
